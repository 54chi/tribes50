Elm.App = Elm.App || {};
Elm.App.make = function (_elm) {
   "use strict";
   _elm.App = _elm.App || {};
   if (_elm.App.values) return _elm.App.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var _op = {};
   var totalItem = function (total) {
      return A2($Html.li,
      _U.list([$Html$Attributes.$class("total")]),
      _U.list([A2($Html.span,_U.list([$Html$Attributes.$class("label")]),_U.list([$Html.text("Total")]))
              ,A2($Html.span,_U.list([$Html$Attributes.$class("points")]),_U.list([$Html.text($Basics.toString(total))]))]));
   };
   var totalPoints = function (entries) {
      var spokenEntries = A2($List.filter,function (_) {    return _.wasSpoken;},entries);
      return $List.sum(A2($List.map,function (_) {    return _.points;},spokenEntries));
   };
   var pageFooter = A2($Html.footer,
   _U.list([]),
   _U.list([A2($Html.a,_U.list([$Html$Attributes.href("http://terakilobyte.com")]),_U.list([$Html.text("the original author\'s blog")]))
           ,A2($Html.span,_U.list([]),_U.list([$Html.text(" | ")]))
           ,A2($Html.a,_U.list([$Html$Attributes.href("http://54chi.com")]),_U.list([$Html.text("my blog")]))]));
   var title = function (message) {    return $Html.text(message);};
   var pageHeader = A2($Html.h1,_U.list([]),_U.list([title("Hello world")]));
   var sortedListOfEntries = function (entries) {    return A2($List.sortBy,function (_) {    return _.points;},entries);};
   var Add = {ctor: "Add"};
   var UpdatePointsInput = function (a) {    return {ctor: "UpdatePointsInput",_0: a};};
   var UpdatePhraseInput = function (a) {    return {ctor: "UpdatePhraseInput",_0: a};};
   var entryForm = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.input,
              _U.list([$Html$Attributes.type$("text")
                      ,$Html$Attributes.placeholder("Phrase")
                      ,$Html$Attributes.value(model.phraseInput)
                      ,$Html$Attributes.name("phrase")
                      ,$Html$Attributes.autofocus(true)
                      ,A2($Utils.onInput,address,UpdatePhraseInput)]),
              _U.list([]))
              ,A2($Html.input,
              _U.list([$Html$Attributes.type$("number")
                      ,$Html$Attributes.placeholder("Points")
                      ,$Html$Attributes.value(model.pointsInput)
                      ,$Html$Attributes.name("points")
                      ,A2($Utils.onInput,address,UpdatePointsInput)]),
              _U.list([]))
              ,A2($Html.button,_U.list([$Html$Attributes.$class("add"),A2($Html$Events.onClick,address,Add)]),_U.list([$Html.text("Add")]))
              ,A2($Html.h2,_U.list([]),_U.list([$Html.text(A2($Basics._op["++"],model.phraseInput,A2($Basics._op["++"]," ",model.pointsInput)))]))]));
   });
   var Mark = function (a) {    return {ctor: "Mark",_0: a};};
   var Delete = function (a) {    return {ctor: "Delete",_0: a};};
   var entryItem = F2(function (address,entry) {
      return A2($Html.li,
      _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "highlight",_1: entry.wasSpoken}])),A2($Html$Events.onClick,address,Mark(entry.id))]),
      _U.list([A2($Html.span,_U.list([$Html$Attributes.$class("phrase")]),_U.list([$Html.text(entry.phrase)]))
              ,A2($Html.span,_U.list([$Html$Attributes.$class("points")]),_U.list([$Html.text($Basics.toString(entry.points))]))
              ,A2($Html.button,_U.list([$Html$Attributes.$class("delete"),A2($Html$Events.onClick,address,Delete(entry.id))]),_U.list([]))]));
   });
   var entryList = F2(function (address,entries) {
      var entryItems = A2($List.map,entryItem(address),entries);
      var items = A2($Basics._op["++"],entryItems,_U.list([totalItem(totalPoints(entries))]));
      return A2($Html.ul,_U.list([]),items);
   });
   var Sort = {ctor: "Sort"};
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.id("container")]),
      _U.list([pageHeader
              ,A2(entryForm,address,model)
              ,A2(entryList,address,model.entries)
              ,A2($Html.button,_U.list([$Html$Attributes.$class("sort"),A2($Html$Events.onClick,address,Sort)]),_U.list([$Html.text("sort")]))
              ,pageFooter]));
   });
   var NoOp = {ctor: "NoOp"};
   var newEntry = F3(function (phrase,points,id) {    return {phrase: phrase,points: points,wasSpoken: false,id: id};});
   var initialModel = {entries: _U.list([A3(newEntry,"In The Cloud",300,3)
                                        ,A3(newEntry,"Future-Proof",100,1)
                                        ,A3(newEntry,"Doing Agile",200,2)
                                        ,A3(newEntry,"Rock-Star Ninja",400,4)])
                      ,phraseInput: ""
                      ,pointsInput: ""
                      ,nextID: 5};
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "NoOp": return model;
         case "Sort": return _U.update(model,{entries: sortedListOfEntries(model.entries)});
         case "Delete": var remainingEntries = A2($List.filter,function (e) {    return !_U.eq(e.id,_p0._0);},model.entries);
           return _U.update(model,{entries: remainingEntries});
         case "Mark": var updateEntries = function (e) {    return _U.eq(e.id,_p0._0) ? _U.update(e,{wasSpoken: $Basics.not(e.wasSpoken)}) : e;};
           return _U.update(model,{entries: A2($List.map,updateEntries,model.entries)});
         case "UpdatePhraseInput": return _U.update(model,{phraseInput: _p0._0});
         case "UpdatePointsInput": return _U.update(model,{pointsInput: _p0._0});
         default: var isInvalid = function (model) {    return $String.isEmpty(model.phraseInput) || $String.isEmpty(model.pointsInput);};
           var entryToAdd = A3(newEntry,model.phraseInput,$Utils.parseInt(model.pointsInput),model.nextID);
           return isInvalid(model) ? model : _U.update(model,
           {phraseInput: "",pointsInput: "",entries: A2($List._op["::"],entryToAdd,model.entries),nextID: model.nextID + 1});}
   });
   var main = $StartApp$Simple.start({model: initialModel,view: view,update: update});
   var Model = F4(function (a,b,c,d) {    return {entries: a,phraseInput: b,pointsInput: c,nextID: d};});
   var Entry = F4(function (a,b,c,d) {    return {phrase: a,points: b,wasSpoken: c,id: d};});
   return _elm.App.values = {_op: _op
                            ,Entry: Entry
                            ,Model: Model
                            ,newEntry: newEntry
                            ,initialModel: initialModel
                            ,NoOp: NoOp
                            ,Sort: Sort
                            ,Delete: Delete
                            ,Mark: Mark
                            ,UpdatePhraseInput: UpdatePhraseInput
                            ,UpdatePointsInput: UpdatePointsInput
                            ,Add: Add
                            ,update: update
                            ,sortedListOfEntries: sortedListOfEntries
                            ,title: title
                            ,pageHeader: pageHeader
                            ,pageFooter: pageFooter
                            ,entryItem: entryItem
                            ,totalPoints: totalPoints
                            ,totalItem: totalItem
                            ,entryList: entryList
                            ,entryForm: entryForm
                            ,view: view
                            ,main: main};
};